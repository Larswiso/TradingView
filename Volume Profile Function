// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© LonesomeTheBlue

//@version=5
indicator('Volume Profile / Fixed Range', overlay=true)

barsBack_start = input.int(title='Number of Bars back / Start', defval=150, minval=1)
barsBack_end = input.int(title='Number of Bars back / END', defval=0, minval=0)

cnum = input.int(title='Row Size', defval=10, minval=5)

col = input.color(color.aqua, "Color")

topbotarr = array.new_float(0)
for i=barsBack_end to barsBack_start
    array.push(topbotarr, close[i]) 

top = array.max(topbotarr)
bot = array.min(topbotarr)
dist = (top - bot) / 500
step = (top - bot) / cnum

// calculate/keep channel levels
levels = array.new_float(cnum + 1)
for x = 0 to cnum by 1
    array.set(levels, x, bot + step * x)

// get the volume if there is intersection
get_vol(y11, y12, y21, y22, height, vol) =>
    nz(math.max(math.min(math.max(y11, y12), math.max(y21, y22)) - math.max(math.min(y11, y12), math.min(y21, y22)), 0) * vol / height)

if barstate.islast
    // calculate/get volume for each channel and candle
    volumes = array.new_float(cnum * 2, 0.)
    for bars = barsBack_end to barsBack_start - 1 by 1
        body_top = math.max(close[bars], open[bars])
        body_bot = math.min(close[bars], open[bars])
        itsgreen = close[bars] >= open[bars]

        topwick = high[bars] - body_top
        bottomwick = body_bot - low[bars]
        body = body_top - body_bot

        bodyvol = body * volume[bars] / (2 * topwick + 2 * bottomwick + body)
        topwickvol = 2 * topwick * volume[bars] / (2 * topwick + 2 * bottomwick + body)
        bottomwickvol = 2 * bottomwick * volume[bars] / (2 * topwick + 2 * bottomwick + body)
        for x = 0 to cnum - 1 by 1
            array.set(volumes, x, array.get(volumes, x) + (itsgreen ? get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, body_top, body, bodyvol) : 0) + get_vol(array.get(levels, x), array.get(levels, x + 1), body_top, high[bars], topwick, topwickvol) / 2 + get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, low[bars], bottomwick, bottomwickvol) / 2)
            array.set(volumes, x + cnum, array.get(volumes, x + cnum) + (itsgreen ? 0 : get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, body_top, body, bodyvol)) + get_vol(array.get(levels, x), array.get(levels, x + 1), body_top, high[bars], topwick, topwickvol) / 2 + get_vol(array.get(levels, x), array.get(levels, x + 1), body_bot, low[bars], bottomwick, bottomwickvol) / 2)

    totalvols = array.new_float(cnum, 0.)
    for x = 0 to cnum - 1 by 1
        array.set(totalvols, x, array.get(volumes, x) + array.get(volumes, x + cnum))

    int poc = array.indexof(totalvols, array.max(totalvols))

    maxvol = array.max(totalvols)
    for x = 0 to cnum * 2 - 1 by 1
        array.set(volumes, x, array.get(volumes, x) * barsBack_start / (3 * maxvol))


    // Draw VP rows
    var vol_bars = array.new_box(cnum * 2, na)
    for x = 0 to cnum - 1 by 1
        array.set(vol_bars, x, box.new(bar_index - barsBack_start + 1, 
                                       array.get(levels, x + 1) - dist, 
                                       bar_index - barsBack_start + 1 + math.round(array.get(volumes, x))*(1-(barsBack_end/barsBack_start)), 
                                       array.get(levels, x) + dist, 
                                       border_width=0,
                                       bgcolor= col))
                                       
        array.set(vol_bars, x+ cnum, box.new(bar_index - barsBack_start + 1 + math.round(array.get(volumes, x))*(1-(barsBack_end/barsBack_start)), 
                                              array.get(levels, x + 1) - dist, 
                                              bar_index - barsBack_start + 1 + math.round(array.get(volumes, x))*(1-(barsBack_end/barsBack_start)) + math.round(array.get(volumes, x + cnum))*(1-(barsBack_end/barsBack_start)), 
                                              array.get(levels, x) + dist, 
                                              border_width=0,
                                              bgcolor= col))
    var line Line = na
    Line := line.new(bar_index-barsBack_end, bot, bar_index-barsBack_end, top, color=col, width=2)

    // ZUSAMMMEN RECHNEN
    var realVOl = array.new_float(0)
    for x = 0 to cnum - 1 by 1
        vol = (array.get(volumes, x) + array.get(volumes, x + cnum))
        array.push(realVOl, vol)
        

    // NORMALISIEREN
    var maxPOC = array.max(realVOl)
    var normalizeVol = array.new_float(0)
    for x = 0 to cnum - 1 by 1
        vol = array.get(realVOl, x)/maxPOC
        array.push(normalizeVol, vol)
        log.info(str.tostring(vol))

    log.info("--")

    threshold = input.float(0.7, "Zonenschwellenwert")

    
    

    from_index = 0
    to_index = 0
    result_from = array.new_int(0)
    for [i, num] in normalizeVol
        if num >= threshold
            if from_index == 0
                from_index := i
            to_index := i
        else
            if from_index != 0
                array.push(result_from, from_index)
                array.push(result_from, to_index)
                from_index := 0    
    if from_index  != 0
        array.push(result_from, from_index)
        array.push(result_from, to_index)
    
    for x in result_from
        log.info(str.tostring(x))

    counter = 0
    var top_vol_bars = array.new_box(cnum * 2, na)
    for x = 0 to cnum - 1 by 1
        if array.get(normalizeVol, x) >= threshold
            array.set(top_vol_bars, x, box.new(bar_index - barsBack_start + 1, array.get(levels, x + 1) - dist,  bar_index, array.get(levels, x) + dist, border_width=0,bgcolor= color.red))
        
        array.set(top_vol_bars, x, box.new(bar_index - barsBack_start + 1, array.get(levels, array.get(result_from, counter) + 1) - dist,  bar_index, array.get(levels, array.get(result_from, counter)) + dist, border_width=0,bgcolor= color.purple))
        if array.size(result_from) >= counter
            counter += 2
